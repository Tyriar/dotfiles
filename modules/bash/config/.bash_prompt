#!/bin/bash

export PROMPT_COMMAND=__prompt_command  # Func to gen PS1 after CMDs

function __prompt_command() {
  local LAST_EXIT=$?
  PS1="\n";
  PS1+="\[\033[01;34m\]\w\[\033[00m\]";
  PS1+="\$(__git_prompt)\033[0m";
  PS1+="\n";
  if [ $LAST_EXIT -eq 0 ]; then
    PS1+="\[\033[1;32m\]";
  else
    PS1+="\[\033[1;31m\]";
  fi
  PS1+="❯ \[\033[0m\]";
  PS2="… ";
}

function __git_prompt() {
  local branchName="";
  local git_arrows=""
  local change_summary=""

  # Check if the current directory is in a Git repository.
  if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == "0" ]; then

    if [ "$(git count-objects -v | grep size-pack | sed 's/size-pack: //')" -gt "500000" ]; then
      change_summary="\033[0;2;37m✗"
    else
      # check if the current directory is in .git before running git checks
      if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == "false" ]; then

        # Ensure the index is up to date.
        git update-index --really-refresh -q &>/dev/null;

        # Check upstream/downstream difference.
        local left="";
        local right="";
        if $(git rev-list --left-only --count HEAD...@'{u}' &>/dev/null); then
          left_output=$(git rev-list --left-only --count HEAD...@'{u}');
          if [ $left_output -gt 0 ]; then
            left="${left_output}⇡";
          fi
        fi;
        if $(git rev-list --right-only --count HEAD...@'{u}' &>/dev/null); then
          right_output=$(git rev-list --right-only --count HEAD...@'{u}');
          if [ $right_output -gt 0 ]; then
            right="${right_output}⇣";
          fi
        fi;
        if [ ! -z "$left" ]; then
          git_arrows+="\033[1;32m${left}"
        fi
        if [ ! -z "$right" ]; then
          git_arrows+="\033[1;31m${right}"
        fi
        if [ ! -z "$git_arrows" ]; then
          git_arrows="\033[1;30m[${git_arrows}\033[1;30m]"
        fi

        local file_summary_output=$(git diff --shortstat);
        local insertions=$(echo $file_summary_output | grep -o -E '([0-9]+ i)' | sed "s/ i//g");
        local deletions=$(echo $file_summary_output | grep -o -E '([0-9]+ d)' | sed "s/ d//g");

        if [ ! -z "$insertions" ]; then
          change_summary+="\033[0;2;32m+${insertions}"
          if [ ! -z "$deletions" ]; then
            change_summary+="\033[1;30m/"
          fi
        fi
        if [ ! -z "$deletions" ]; then
          change_summary+="\033[0;2;31m-${deletions}"
        fi

        # Check for untracked files.
        if [ -n "$(git ls-files --others --exclude-standard)" ]; then
          if [ ! -z "$insertions" ] || [ ! -z "$deletions" ]; then
            change_summary+="\033[1;30m/"
          fi
          change_summary+='\033[0;2;36m?';
        fi;
      fi;
    fi;

    if [ ! -z "$change_summary" ]; then
      change_summary=" ${change_summary}\033[0m"
    fi

    # Get the short symbolic ref.
    # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
    # Otherwise, just give up.
    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
        git rev-parse --short HEAD 2> /dev/null || \
        echo '(unknown)')";

    echo -e " \033[1;33m@${branchName}${git_arrows}${change_summary}"
  else
    return;
  fi;
}
